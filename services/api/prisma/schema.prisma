// Prisma schema for ShimaHome MVP
// Database: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

// Landlord onboarding
model LandlordProfile {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  fullName       String
  phone          String
  phoneVerified  Boolean  @default(false)
  emailVerified  Boolean  @default(false)
  idNumber       String
  residenceArea  String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum VerificationType {
  PHONE
  EMAIL
}

model VerificationCode {
  id         String           @id @default(uuid())
  user       User             @relation(fields: [userId], references: [id])
  userId     String
  type       VerificationType
  code       String
  expiresAt  DateTime
  consumedAt DateTime?
  createdAt  DateTime         @default(now())

  @@index([userId, type, code])
}

enum SubmissionStatus {
  DRAFT
  UNDER_REVIEW
  APPROVED
  REJECTED
}

model PropertySubmission {
  id          String            @id @default(uuid())
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  name        String
  description String?
  address     String?
  latitude    Float?
  longitude   Float?
  status      SubmissionStatus  @default(DRAFT)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  photos      PropertyPhoto[]
}

model PropertyPhoto {
  id            String              @id @default(uuid())
  submission    PropertySubmission  @relation(fields: [submissionId], references: [id])
  submissionId  String
  storageKey    String
  fileName      String?
  mimeType      String?
  size          Int?
  sha256        String?
  createdAt     DateTime            @default(now())
}

model LoginAttempt {
  id        String   @id @default(uuid())
  email     String
  ip        String?
  succeeded Boolean
  createdAt DateTime @default(now())
}

model RefreshToken {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  tokenHash  String
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  revokedAt  DateTime?
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(uuid())
  email     String   @unique
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  leases    Lease[]
}

model Landlord {
  id        String   @id @default(uuid())
  email     String   @unique
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  properties Property[]
}

model Property {
  id         String   @id @default(uuid())
  title      String
  type       PropertyType
  location   String
  rent       Int
  reputation Float    @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  landlord   Landlord @relation(fields: [landlordId], references: [id])
  landlordId String

  units      Unit[]
}

enum PropertyType {
  bedsitter
  one_bedroom
  two_bedroom
  studio
  other
}

model Unit {
  id         String   @id @default(uuid())
  name       String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  leases     Lease[]
  tickets    MaintenanceTicket[]
}

model Lease {
  id         String   @id @default(uuid())
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  tenantId   String
  unit       Unit     @relation(fields: [unitId], references: [id])
  unitId     String
  startDate  DateTime
  endDate    DateTime?
  rent       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  payments   Payment[]
}

model Payment {
  id         String   @id @default(uuid())
  lease      Lease    @relation(fields: [leaseId], references: [id])
  leaseId    String
  amount     Int
  currency   String   @default("KES")
  status     PaymentStatus @default(PENDING)
  createdAt  DateTime @default(now())
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
}

model MaintenanceTicket {
  id         String   @id @default(uuid())
  title      String
  description String
  status     TicketStatus @default(OPEN)
  unit       Unit     @relation(fields: [unitId], references: [id])
  unitId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// Authentication
enum Role {
  TENANT
  LANDLORD
  ADMIN
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  role         Role     @default(TENANT)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenantProfile TenantProfile?
  landlordProfile LandlordProfile?
  kycDocuments  KycDocument[]
  refreshTokens RefreshToken[]
  kycChecks     KycCheck[]
  propertySubmissions PropertySubmission[]
  verificationCodes VerificationCode[]
}

// KYC and audit
enum KYCStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DocKind {
  NATIONAL_ID
  PASSPORT
  UTILITY_BILL
  SELFIE
  OWNERSHIP_DOC
}

model TenantProfile {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  fullName  String
  idNumber  String
  dob       DateTime
  status    KYCStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KycDocument {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  kind        DocKind
  status      KYCStatus @default(PENDING)
  storageKey  String
  note        String?
  fileName    String?
  mimeType    String?
  size        Int?
  sha256      String?
  uploadedAt  DateTime  @default(now())
  reviewedAt  DateTime?
  reviewerId  String?
}

enum CheckStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model KycCheck {
  id           String      @id @default(uuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  provider     String
  externalId   String?
  status       CheckStatus @default(PENDING)
  result       Json?
  startedAt    DateTime    @default(now())
  completedAt  DateTime?
}

model AuditLog {
  id            String   @id @default(uuid())
  actorUserId   String?
  action        String
  resourceType  String
  resourceId    String?
  metadata      Json?
  createdAt     DateTime @default(now())
}
