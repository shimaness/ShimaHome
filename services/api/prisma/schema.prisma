// Prisma schema for ShimaHome MVP
// Database: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

// Landlord onboarding
model LandlordProfile {
  id             String     @id @default(uuid())
  user           User       @relation(fields: [userId], references: [id])
  userId         String     @unique
  fullName       String
  phone          String
  phoneVerified  Boolean    @default(false)
  emailVerified  Boolean    @default(false)
  idNumber       String
  residenceArea  String
  verified       Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  properties     PropertyListing[]
}

enum VerificationType {
  PHONE
  EMAIL
}

model VerificationCode {
  id         String           @id @default(uuid())
  user       User             @relation(fields: [userId], references: [id])
  userId     String
  type       VerificationType
  code       String
  expiresAt  DateTime
  consumedAt DateTime?
  createdAt  DateTime         @default(now())

  @@index([userId, type, code])
}

enum SubmissionStatus {
  DRAFT
  UNDER_REVIEW
  APPROVED
  REJECTED
}

model PropertySubmission {
  id          String            @id @default(uuid())
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  name        String
  description String?
  address     String?
  latitude    Float?
  longitude   Float?
  status      SubmissionStatus  @default(DRAFT)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  photos      PropertyPhoto[]
}

model PropertyPhoto {
  id            String              @id @default(uuid())
  submission    PropertySubmission  @relation(fields: [submissionId], references: [id])
  submissionId  String
  storageKey    String
  fileName      String?
  mimeType      String?
  size          Int?
  sha256        String?
  createdAt     DateTime            @default(now())
}

// New Property Management System
enum PropertyListingStatus {
  ACTIVE
  INACTIVE
  UNDER_REVIEW
}

enum UnitType {
  SINGLE_ROOM
  BEDSITTER
  ONE_BEDROOM
  TWO_BEDROOM
  THREE_BEDROOM
  STUDIO
  OTHER
}

enum OccupancyStatus {
  VACANT
  OCCUPIED
  MAINTENANCE
}

enum PhotoTag {
  BEDROOM
  LIVING_ROOM
  KITCHEN
  TOILET
  BATHROOM
  BALCONY
  COMPOUND
  EXTERIOR
  PARKING
  OTHER
}

model PropertyListing {
  id            String                 @id @default(uuid())
  landlord      LandlordProfile        @relation(fields: [landlordId], references: [id])
  landlordId    String
  name          String                  // e.g., "Onesmus Hostels"
  description   String?
  location      String                  // e.g., "Meru"
  address       String?
  latitude      Float?
  longitude     Float?
  status        PropertyListingStatus   @default(UNDER_REVIEW)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  units         PropertyUnit[]
  
  @@index([location, status])
  @@index([landlordId])
}

model PropertyUnit {
  id            String           @id @default(uuid())
  property      PropertyListing  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId    String
  name          String           // e.g., "On 2"
  unitType      UnitType         // e.g., ONE_BEDROOM
  description   String?
  rent          Int              // Monthly rent
  deposit       Int?             // Security deposit
  occupancyStatus OccupancyStatus @default(VACANT)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  photos        UnitPhoto[]
  
  @@index([propertyId, occupancyStatus])
  @@index([unitType, occupancyStatus])
}

model UnitPhoto {
  id          String       @id @default(uuid())
  unit        PropertyUnit @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId      String
  storageKey  String
  photoTag    PhotoTag     // e.g., BEDROOM, KITCHEN
  fileName    String?
  mimeType    String?
  size        Int?
  order       Int          @default(0) // Display order
  createdAt   DateTime     @default(now())
  
  @@index([unitId, photoTag])
}

model LoginAttempt {
  id         String   @id @default(uuid())
  email      String
  ip         String?
  userAgent  String?
  succeeded  Boolean
  failReason String?
  createdAt  DateTime @default(now())
  
  @@index([email, createdAt])
}

enum SecurityEventType {
  LOGIN_SUCCESS
  LOGIN_FAILED
  PASSWORD_RESET_REQUESTED
  PASSWORD_RESET_COMPLETED
  MFA_ENABLED
  MFA_DISABLED
  SESSION_REVOKED
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  NEW_DEVICE_LOGIN
}

model SecurityEvent {
  id        String            @id @default(uuid())
  userId    String?
  email     String?
  eventType SecurityEventType
  ipAddress String?
  userAgent String?
  metadata  Json?
  createdAt DateTime          @default(now())
  
  @@index([userId, createdAt])
  @@index([email, createdAt])
}

model RefreshToken {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  tokenHash   String
  deviceName  String?
  deviceType  String?
  ipAddress   String?
  userAgent   String?
  lastUsedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  revokedAt   DateTime?
  
  @@index([userId, revokedAt])
}

model PasswordResetToken {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  token      String   @unique
  expiresAt  DateTime
  consumedAt DateTime?
  createdAt  DateTime @default(now())
  
  @@index([token, consumedAt])
}

model TrustedDevice {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  deviceHash  String
  deviceName  String?
  lastUsedAt  DateTime @default(now())
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  @@index([userId, deviceHash])
  @@unique([userId, deviceHash])
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(uuid())
  email     String   @unique
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  leases    Lease[]
}

model Landlord {
  id        String   @id @default(uuid())
  email     String   @unique
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  properties Property[]
}

model Property {
  id         String   @id @default(uuid())
  title      String
  type       PropertyType
  location   String
  rent       Int
  reputation Float    @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  landlord   Landlord @relation(fields: [landlordId], references: [id])
  landlordId String

  units      Unit[]
}

enum PropertyType {
  bedsitter
  one_bedroom
  two_bedroom
  studio
  other
}

model Unit {
  id         String   @id @default(uuid())
  name       String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  leases     Lease[]
  tickets    MaintenanceTicket[]
}

model Lease {
  id         String   @id @default(uuid())
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  tenantId   String
  unit       Unit     @relation(fields: [unitId], references: [id])
  unitId     String
  startDate  DateTime
  endDate    DateTime?
  rent       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  payments   Payment[]
}

model Payment {
  id         String   @id @default(uuid())
  lease      Lease    @relation(fields: [leaseId], references: [id])
  leaseId    String
  amount     Int
  currency   String   @default("KES")
  status     PaymentStatus @default(PENDING)
  createdAt  DateTime @default(now())
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
}

model MaintenanceTicket {
  id         String   @id @default(uuid())
  title      String
  description String
  status     TicketStatus @default(OPEN)
  unit       Unit     @relation(fields: [unitId], references: [id])
  unitId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// Authentication
enum Role {
  TENANT
  LANDLORD
  ADMIN
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  role         Role      @default(TENANT)
  emailVerified Boolean  @default(false)
  mfaEnabled   Boolean   @default(false)
  mfaSecret    String?
  mfaBackupCodes String?
  lockedUntil  DateTime?
  failedLoginAttempts Int @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  tenantProfile TenantProfile?
  landlordProfile LandlordProfile?
  kycDocuments  KycDocument[]
  refreshTokens RefreshToken[]
  passwordResetTokens PasswordResetToken[]
  trustedDevices TrustedDevice[]
  kycChecks     KycCheck[]
  propertySubmissions PropertySubmission[]
  verificationCodes VerificationCode[]
}

// KYC and audit
enum KYCStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DocKind {
  NATIONAL_ID
  PASSPORT
  UTILITY_BILL
  SELFIE
  OWNERSHIP_DOC
}

model TenantProfile {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  fullName  String
  displayName String?
  bio         String?
  idNumber  String
  dob       DateTime
  status    KYCStatus @default(PENDING)
  avatarStorageKey String?
  avatarFileName   String?
  avatarMimeType   String?
  avatarSize       Int?
  avatarSha256     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KycDocument {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  kind        DocKind
  status      KYCStatus @default(PENDING)
  storageKey  String
  note        String?
  fileName    String?
  mimeType    String?
  size        Int?
  sha256      String?
  uploadedAt  DateTime  @default(now())
  reviewedAt  DateTime?
  reviewerId  String?
}

enum CheckStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model KycCheck {
  id           String      @id @default(uuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  provider     String
  externalId   String?
  status       CheckStatus @default(PENDING)
  result       Json?
  startedAt    DateTime    @default(now())
  completedAt  DateTime?
}

model AuditLog {
  id            String   @id @default(uuid())
  actorUserId   String?
  action        String
  resourceType  String
  resourceId    String?
  metadata      Json?
  createdAt     DateTime @default(now())
}
